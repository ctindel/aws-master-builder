{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Parameters":{
    "AWSAccountId":{
      "Type":"String",
      "Description":"AWS Account ID"
    },
    "Route53HostedZoneName":{
      "Type":"String",
      "Description":"Route53 Hosted Zone Name"
    },
    "ACMCertARN":{
      "Type":"String",
      "Description":"ACM Cert ARN"
    },
    "ESVersion" : {
      "Description" : "Elastic Search Version",
      "Type" : "String",
      "ConstraintDescription" : "must be a valid ES version."
    },
    "ESInstanceType" : {
      "Description" : "Elastic Search node instance type",
      "Type" : "String",
      "Default" : "i3.xlarge.elasticsearch",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ESInstanceCount" : {
      "Description" : "Number of instances to start",
      "Default": "3",
      "MinValue": "2",
      "MaxValue": "12",
      "Type" : "Number"
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
    }
  },
  "Mappings":{
  },
  "Resources":{
    "APIGatewayServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "apigateway.amazonaws.com",
                  "lambda.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":{
              "Fn::Join":[
                "",
                [
                  {
                    "Ref":"AWS::StackName"
                  },
                  "-policy"
                ]
              ]
            },
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "dynamodb:*",
                    "lambda:*",
                    "logs:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "DMSServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "dms.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":{
              "Fn::Join":[
                "",
                [
                  {
                    "Ref":"AWS::StackName"
                  },
                  "-policy"
                ]
              ]
            },
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "dynamodb:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "APIGatewayLogsGroup":{
      "Type":"AWS::Logs::LogGroup",
      "Properties":{
        "LogGroupName": {
          "Fn::Join":[
            "",
            [
              {
                "Ref":"AWS::StackName"
              },
              "-api"
            ]
          ]
        },
        "RetentionInDays":14
      }
    },
    "APIGatewayAccount":{
      "Type" : "AWS::ApiGateway::Account",
      "Properties" : {
        "CloudWatchRoleArn": {
          "Fn::GetAtt":[
            "APIGatewayServiceRole",
            "Arn"
          ]
        }
      }
    },
    "APIGateway": {
      "Type" : "AWS::ApiGateway::RestApi",
      "DependsOn":"APIGatewayAccount",
      "Properties" : {  
        "Name" : {
          "Fn::Join":[
            "",
            [
              { "Ref":"AWS::StackName" },
              "-api"
            ]
          ]
        },
        "EndpointConfiguration" : {
          "Types" : [ "EDGE" ]
        }
      }
    },
    "APIGatewayDomainName" : {
      "Type" : "AWS::ApiGateway::DomainName",
      "Properties": {
        "CertificateArn": { "Ref":"ACMCertARN" },
        "DomainName": {
          "Fn::Join":[
            "",
            [
              { "Ref":"AWS::StackName" },
              "-api.",
              { "Ref":"Route53HostedZoneName" }
            ]
          ]
        },
        "EndpointConfiguration" : {
          "Types" : [ "EDGE" ]
        }
      }
    },
    "APIGatewayProdDeployment": {
      "Type" : "AWS::ApiGateway::Deployment",
      "DependsOn": [ "APIGatewayServiceProxyGetProductByIdMethod" ], 
      "Properties" : {  
        "RestApiId" : { "Ref" : "APIGateway" },
        "Description" : "prod",
        "StageName": "prod"
      }
    },
    "APIMapping" : {
      "Type" : "AWS::ApiGateway::BasePathMapping",
      "DependsOn":["APIGatewayProdDeployment", "APIGatewayDomainName"],
      "Properties" : {
        "DomainName": { "Ref": "APIGatewayDomainName" },
        "RestApiId" : { "Ref" : "APIGateway" },
        "Stage" : "prod"
      }
    },
    "APIGatewayServiceProxyProductResource": {
      "Type" : "AWS::ApiGateway::Resource",
      "DependsOn":"APIGateway",
      "Properties" : {
        "PathPart": "product",
        "RestApiId": { "Ref" : "APIGateway" },
        "ParentId" : {"Fn::GetAtt": ["APIGateway", "RootResourceId"]}
      }
    },
    "APIGatewayServiceProxyProductProductIdResource": {
      "Type" : "AWS::ApiGateway::Resource",
      "DependsOn":"APIGateway",
      "Properties" : {
        "PathPart": "{productId}",
        "RestApiId": { "Ref" : "APIGateway" },
        "ParentId" : { "Ref" : "APIGatewayServiceProxyProductResource" }
      }
    },
    "APIGatewayServiceProxyGetProductByIdMethod": {
      "Type" : "AWS::ApiGateway::Method",
      "Properties" : {
        "RestApiId": { "Ref" : "APIGateway" },
        "ResourceId": { "Ref" : "APIGatewayServiceProxyProductProductIdResource" },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          { 
            "ResponseModels": {"application/json":"Empty"},
            "StatusCode" : 200 
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Credentials": { "Fn::GetAtt":[ "APIGatewayServiceRole", "Arn" ] },
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "Uri": {
            "Fn::Join":[
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref":"AWS::Region"
                },
                ":dynamodb:action/GetItem"
              ]
            ]
          },
          "RequestTemplates": {
            "application/json": "{ \"TableName\": \"Product\", \"Key\": { \"id\": { \"S\": \"$input.params('productId')\" } } }"
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": "{\"id\": \"$input.path('$.Item.id.S')\", \"description\": \"$input.path('$.Item.description.S')\", \"numReviews\": \"$input.path('$.Item.numReviews.N')\" }"
              }
            }
          ]
        }
      }
    },
    "LambdaRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com",
                  "lambda.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName" : { "Fn::Join":[ "", [ { "Ref":"AWS::StackName" }, "-es-service-policy" ] ] },
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action": "es:*", 
                  "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action": "lambda:*", 
                  "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action": "logs:*", 
                  "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action": "dynamodb:*", 
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ESInstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"LambdaRole"
          }
        ]
      }
    },
    "ElasticsearchDomain": {
      "Type": "AWS::Elasticsearch::Domain",
      "Properties": {
        "DomainName" : { "Fn::Join":[ "", [ { "Ref":"AWS::StackName" }, "-es2" ] ] },
        "ElasticsearchVersion" : { "Ref":"ESVersion" },
        "ElasticsearchClusterConfig": {
          "DedicatedMasterEnabled": "true",
          "InstanceCount": { "Ref" : "ESInstanceCount" },
          "ZoneAwarenessEnabled": "true",
          "InstanceType": { "Ref" : "ESInstanceType" },
          "DedicatedMasterType": "m4.large.elasticsearch",
          "DedicatedMasterCount": "3"
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "Iops": 0,
          "VolumeSize": 20,
          "VolumeType": "gp2"
        },
        "SnapshotOptions": {
          "AutomatedSnapshotStartHour": "0"
        },
        "AccessPolicies": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "AWS": { "Fn::GetAtt" : ["LambdaRole", "Arn"] }
            },
            "Action": "es:*",
            "Resource": "arn:aws:es:us-east-2:284628898641:domain/ctindel-mb3-es/*"
          }]
        },
        "AdvancedOptions": {
          "indices.fielddata.cache.size": "",
          "rest.action.multi.allow_explicit_index": "true"
        }
      }
    },
    "APIGatewayRoute53Record": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : {
          "Fn::Join":[
            "",
            [
              { "Ref":"Route53HostedZoneName" },
              "."
            ]
          ]
        },
        "Name" : {
          "Fn::Join":[
            "",
            [
              { "Ref":"AWS::StackName" },
              "-api.",
              { "Ref":"Route53HostedZoneName" }
            ]
          ]
        },
        "Type" : "A",
        "AliasTarget" : {
          "HostedZoneId" : {"Fn::GetAtt": ["APIGatewayDomainName", "DistributionHostedZoneId"]},
          "DNSName": {"Fn::GetAtt": ["APIGatewayDomainName", "DistributionDomainName"]},
          "EvaluateTargetHealth": "false"
        }
      }
    }
  },
  "Outputs":{
  }
}
