swagger: '2.0'
info:
  description: 'This is an example product/order inventory API '
  version: 1.0.0
  title: ctindel MB3
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: ctindel@amazon.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: store.ctindel-aws.com
basePath: /v1
tags:
  - name: product
    description: Operations on products
  - name: order
    description: Access to orders
schemes:
  - https
  - http
paths:
  /order:
    post:
      tags:
        - order
      summary: Add a new order
      description: ''
      operationId: addOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New Order Request
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '201': {
            description: 'Successfully added',
            schema: {
              $ref: '#/definitions/Order'
            }
          }
        '405':
          description: Invalid input
  /order/findByStatus:
    get:
      tags:
        - order
      summary: Finds Order by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findOrdersByStatus
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          type: array
          items:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        '400':
          description: Invalid status value
  '/product/{productId}':
    get:
      tags:
        - product
      description: >-
        Returns information for a single product
      operationId: findProductById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of product
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Product Response
          schema:
            $ref: '#/definitions/Product'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiResponse'
  '/product/{productId}/review':
    post:
      tags:
        - product
      description: >-
        Adds a review to a product
      operationId: addProductReviewById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of product
          required: true
          type: string
          format: uuid
        - name: reviewText
          in: body
          description: Text of Review
          required: true
          schema:
            $ref: '#/definitions/NewProductReview'
      responses:
        '201':
          description: Product Response
          schema:
            $ref: '#/definitions/ApiResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiResponse'
  '/product/{productId}/reviews':
    get:
      tags:
        - product
      description: >-
        Gets all reviews for a product (paginated)
      operationId: getProductReviewsById
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: productId
          in: path
          description: ID of product
          required: true
          type: string
          format: uuid
        - name: pageNum
          in: query
          description: Page number of reviews to get
          required: true
          type: integer
          minimum: 1
          maximum: 5
      responses:
        '200':
          description: Product Response
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductReview'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiResponse'

  '/product/{productId}/review/{reviewId}':
    get:
      tags:
        - product
      description: >-
        Returns a single review for a single product
      operationId: findProductReviewById
      parameters:
        - name: productId
          in: path
          description: ID of product
          required: true
          type: string
          format: uuid
        - name: reviewId
          in: path
          description: ID of review
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Product Review Response
          schema:
            $ref: '#/definitions/ProductReview'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiResponse'
  '/product/{productId}/review/{reviewId}/like':
    post:
      tags:
        - product
      description: >-
        Add a like to a product review
      operationId: likeProductReviewById
      parameters:
        - name: productId
          in: path
          description: ID of product
          required: true
          type: string
          format: uuid
        - name: reviewId
          in: path
          description: ID of review
          required: true
          type: string
          format: uuid
      responses:
        '201':
          description: Product Review Add Like Response
          schema:
            $ref: '#/definitions/ApiResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiResponse'
  '/product/{productId}/review/{reviewId}/dislike':
    post:
      tags:
        - product
      description: >-
        Add a dislike to a product review
      operationId: dislikeProductReviewById
      parameters:
        - name: productId
          in: path
          description: ID of product
          required: true
          type: string
          format: uuid
        - name: reviewId
          in: path
          description: ID of review
          required: true
          type: string
          format: uuid
      responses:
        '201':
          description: Product Review Add Dislike Response
          schema:
            $ref: '#/definitions/ApiResponse'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiResponse'
  '/product/reviews/search':
    get:
      tags:
        - product
      description: >-
        Search all product reviews
      operationId: searchProductReviews
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: searchText
          in: query
          description: Search review text for all products
          required: true
          type: string
      responses:
        '200':
          description: Product Response
          schema:
            type: array
            items:
                type: object
                properties:
                  product:
                    $ref: '#/definitions/Product'
                  review:
                    $ref: '#/definitions/ProductReview'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiResponse'
definitions:
  Order:
    type: object
    allOf:
      - $ref: '#/definitions/NewOrder'
    required:
      - id
      - customerName
      - orderDate
      - products
    properties:
      id:
        type: string
        format: uuid
      orderDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
  NewOrder:
    type: object
    required:
      - customerName
      - products
    properties:
      customerName:
        type: string
        example: Joe Cool
      products:
        type: array
        items:
          type: object
          properties:
            productId:
              type: string
              format: uuid
            count:
              type: integer
  Product:
    type: object
    properties:
      productId:
        type: string
        format: uuid
      numReviews:
        type: number
  ProductReview:
    type: object
    allOf:
      - $ref: '#/definitions/NewProductReview'
    properties:
      numLikes:
        type: integer
      numDislikes:
        type: integer
  NewProductReview:
    type: object
    required:
      - productId
      - reviewText
      - numStars
    properties:
      productId:
        type: string
        format: uuid
      reviewText:
        type: string
        example: This product really whips the llama's ass!
      numStars:
        type: integer
        minimum: 1
        maximum: 5
        example: 3
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
